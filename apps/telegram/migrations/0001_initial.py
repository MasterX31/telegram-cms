# Generated by Django 2.2.8 on 2019-12-15 15:14

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BaseListener',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(blank=True, default=False, null=True, verbose_name='Is enabled')),
                ('auto_publishing_is_enabled', models.BooleanField(blank=True, default=None, null=True, verbose_name='Automatic publishing is enabled')),
                ('publications_saving', models.BooleanField(blank=True, default=True, null=True, verbose_name='Automatic saving publication')),
                ('timestamp', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tg_chat_id', models.IntegerField(blank=True, default=None, null=True, verbose_name='Chat id')),
                ('tg_chat_type', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Chat type')),
                ('tg_chat_title', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Chat title')),
                ('tg_chat_username', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Chat username')),
            ],
            options={
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
            },
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_name', models.CharField(default=None, max_length=255, null=True, verbose_name='Session name')),
                ('session_string', models.CharField(blank=True, default=None, help_text='Updated automatically', max_length=1000, null=True)),
                ('api_id', models.PositiveIntegerField(default=None, null=True, verbose_name='API ID')),
                ('api_hash', models.CharField(default=None, max_length=255, null=True, verbose_name='API Hash')),
                ('access_token', models.CharField(blank=True, default=None, help_text='Updated and created automatically', max_length=255, null=True, verbose_name='CMS API Access Token')),
                ('bot_token', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Telegram Bot Token (if bot)')),
                ('is_bot', models.BooleanField(blank=True, default=None, null=True, verbose_name="It's bot")),
                ('is_active', models.BooleanField(blank=True, default=None, help_text='Updated automatically.', null=True, verbose_name='Is active (on)')),
                ('is_ready', models.BooleanField(blank=True, default=None, null=True, verbose_name='Is ready to use (set it on when app ready to use)')),
            ],
            options={
                'verbose_name': 'config',
                'verbose_name_plural': 'configs',
            },
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.TextField(blank=True, default=None, help_text='Will be fixed', null=True, verbose_name='Subject of history')),
                ('is_error', models.BooleanField(blank=True, default=False, null=True)),
                ('timestamp', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'history',
                'verbose_name_plural': 'history',
            },
        ),
        migrations.CreateModel(
            name='Middleware',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('middleware_type', models.CharField(choices=[('DefaultTriggerReason', 'Default Trigger Reason')], default=None, max_length=255, null=True, verbose_name='Handler')),
            ],
            options={
                'verbose_name': 'middleware',
                'verbose_name_plural': 'trigger middleware',
            },
        ),
        migrations.CreateModel(
            name='TelegramUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tg_user_id', models.PositiveIntegerField(blank=True, default=None, null=True, verbose_name='Sender id')),
                ('tg_username', models.CharField(blank=True, db_index=True, default=None, max_length=255, null=True, verbose_name='Sender username')),
                ('tg_first_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Sender first name')),
                ('tg_last_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Sender last name')),
                ('tg_recently_status', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Recently status')),
                ('is_bot', models.BooleanField(blank=True, default=None, null=True, verbose_name="It's bot")),
                ('is_contact', models.BooleanField(blank=True, default=None, null=True, verbose_name='User from contacts')),
                ('is_scam', models.BooleanField(blank=True, default=None, null=True, verbose_name='Is scam')),
                ('is_support', models.BooleanField(blank=True, default=None, null=True, verbose_name='Is support')),
            ],
            options={
                'verbose_name': 'telegram user',
                'verbose_name_plural': 'telegram users',
            },
        ),
        migrations.CreateModel(
            name='BaseChatListener',
            fields=[
                ('baselistener_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='telegram.BaseListener')),
                ('listener_type', models.CharField(choices=[('DefaultChatListener', 'Default Chat Listener')], default=None, max_length=255, null=True, verbose_name='Type')),
            ],
            options={
                'verbose_name': 'base chat listener',
                'verbose_name_plural': 'base chats listeners',
            },
            bases=('telegram.baselistener',),
        ),
        migrations.CreateModel(
            name='BaseDialogueListener',
            fields=[
                ('baselistener_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='telegram.BaseListener')),
                ('listener_type', models.CharField(choices=[('DefaultDialogueListener', 'Default Dialogue Listener')], default=None, max_length=255, null=True, verbose_name='Type')),
            ],
            options={
                'verbose_name': 'base dialogue listener',
                'verbose_name_plural': 'base dialogues listeners',
            },
            bases=('telegram.baselistener',),
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.CharField(blank=True, choices=[('Incoming', 'Incoming'), ('Sent', 'Sent')], default=None, max_length=255, null=True, verbose_name='Message type')),
                ('message_id', models.PositiveIntegerField(blank=True, default=None, null=True, verbose_name='Message id')),
                ('text', models.TextField(blank=True, default=None, null=True, verbose_name='Message text')),
                ('sender_id', models.PositiveIntegerField(blank=True, default=None, null=True, verbose_name='Sender id')),
                ('sender_username', models.CharField(blank=True, db_index=True, default=None, max_length=255, null=True, verbose_name='Sender username')),
                ('sender_first_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Sender first name')),
                ('sender_last_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Sender last name')),
                ('sender_recently_status', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Recently status')),
                ('sender_is_bot', models.BooleanField(blank=True, default=None, null=True, verbose_name="It's bot")),
                ('sender_is_contact', models.BooleanField(blank=True, default=None, null=True, verbose_name='Sender in contacts')),
                ('sender_is_scam', models.BooleanField(blank=True, default=None, null=True, verbose_name='Sender is scam')),
                ('sender_is_support', models.BooleanField(blank=True, default=None, null=True, verbose_name="It's support")),
                ('chat_id', models.IntegerField(blank=True, default=None, null=True, verbose_name='Chat id')),
                ('chat_type', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Chat type')),
                ('chat_title', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Chat title')),
                ('chat_username', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Chat username')),
                ('timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('app', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='telegram.Config', verbose_name='Application')),
            ],
            options={
                'verbose_name': 'message',
                'verbose_name_plural': 'Messages',
            },
        ),
        migrations.AddField(
            model_name='baselistener',
            name='app',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='telegram.Config', verbose_name='Application'),
        ),
        migrations.CreateModel(
            name='Trigger',
            fields=[
                ('middleware_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='telegram.Middleware')),
                ('title', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Title')),
                ('words', models.TextField(blank=True, default=None, help_text='Separated by a comma without spaces in between. If left blank, the trigger will become "Executable Immediately".He will not wait for the trigger word on entry, but will be executed immediately upon his call.Convenient for dynamic dialogue continuation.', null=True, verbose_name='Trigger words')),
                ('answers', models.TextField(blank=True, default=None, help_text='Separated by a comma. \nThe answer is randomly selected from the specified list.', null=True, verbose_name='answers')),
                ('is_enabled', models.BooleanField(blank=True, default=True, null=True, verbose_name='Is Enabled')),
                ('is_entrypoint_instance', models.BooleanField(blank=True, default=False, null=True, verbose_name='Is entrypoint instance')),
                ('is_exitpoint_instance', models.BooleanField(blank=True, default=False, null=True, verbose_name='Is exitpoint instance')),
                ('is_current_instance', models.BooleanField(blank=True, default=False, editable=False, null=True, verbose_name='Is current instance')),
                ('is_finished_instance', models.BooleanField(blank=True, default=False, editable=False, null=True, verbose_name='Is finished instance')),
                ('is_instance', models.BooleanField(blank=True, default=None, editable=False, help_text='Automatically installed.', null=True, verbose_name='Instance of the inside of the dialogue')),
                ('is_action', models.BooleanField(blank=True, default=None, help_text='If so, the trigger will not wait for the input word. It will be executed immediately upon call. Convenient for the dynamic continuation of the dialogue.', null=True, verbose_name='Executable Immediately')),
                ('is_reverse_action', models.BooleanField(blank=True, default=None, help_text='It works when the response is sent first and a trigger input is expected after the response. Installed automatically', null=True, verbose_name='Reverse trigger')),
                ('timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('child_trigger', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='from_child', to='telegram.Trigger', verbose_name='Child trigger')),
                ('parent_trigger', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='telegram.Trigger', verbose_name='Parent trigger')),
            ],
            options={
                'verbose_name': 'trigger',
                'verbose_name_plural': 'triggers',
            },
            bases=('telegram.middleware',),
        ),
        migrations.CreateModel(
            name='Scene',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Scene')),
                ('is_enabled', models.BooleanField(blank=True, default=False, null=True, verbose_name='Is enabled')),
                ('timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('app', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='telegram.Config', verbose_name='Application')),
                ('triggers', models.ManyToManyField(blank=True, default=None, to='telegram.Trigger', verbose_name='Triggers')),
            ],
            options={
                'verbose_name': 'scene',
                'verbose_name_plural': 'scenes',
            },
        ),
        migrations.CreateModel(
            name='DialogueListener',
            fields=[
                ('basedialoguelistener_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='telegram.BaseDialogueListener')),
                ('to_chat', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='telegram.Chat', verbose_name='To chat')),
            ],
            options={
                'verbose_name': 'group listener',
                'verbose_name_plural': 'group listeners',
            },
            bases=('telegram.basedialoguelistener',),
        ),
        migrations.CreateModel(
            name='ChatListener',
            fields=[
                ('basechatlistener_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='telegram.BaseChatListener')),
                ('from_chat', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='from_chat_listener', to='telegram.Chat', verbose_name='From chat')),
                ('to_chat', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='telegram.Chat', verbose_name='To chat')),
            ],
            options={
                'verbose_name': 'group listener',
                'verbose_name_plural': 'group listeners',
            },
            bases=('telegram.basechatlistener',),
        ),
    ]
