# Generated by Django 2.2.6 on 2019-11-29 20:59

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BaseScene',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Сценарий')),
                ('is_enabled', models.BooleanField(blank=True, default=False, null=True, verbose_name='Активный')),
                ('timestamp', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'родительская сцена',
                'verbose_name_plural': 'родительские сцены',
            },
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tg_chat_id', models.IntegerField(blank=True, default=None, null=True, verbose_name='ID чата')),
                ('tg_chat_type', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Тип чата, напр. супергруппа')),
                ('tg_chat_title', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Title чата')),
                ('tg_chat_username', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Username чата')),
            ],
            options={
                'verbose_name': 'чат',
                'verbose_name_plural': 'чаты',
            },
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_name', models.CharField(default=None, max_length=255, null=True, verbose_name='Название сессии')),
                ('api_id', models.PositiveIntegerField(default=None, null=True, verbose_name='API ID')),
                ('api_hash', models.CharField(default=None, max_length=255, null=True, verbose_name='API Hash')),
                ('access_token', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Токен доступа к API')),
                ('bot_token', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Токен бота (если это бот)')),
                ('is_bot', models.BooleanField(blank=True, default=None, null=True, verbose_name='Это бот')),
                ('is_active', models.BooleanField(blank=True, default=None, help_text='Изменять вручную не нужно.', null=True, verbose_name='Активен (включен)')),
                ('is_ready', models.BooleanField(blank=True, default=None, null=True, verbose_name='Готов к использованию')),
            ],
            options={
                'verbose_name': 'config',
                'verbose_name_plural': 'configs',
            },
        ),
        migrations.CreateModel(
            name='DefaultTriggerReason',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'обработчик',
                'verbose_name_plural': 'обработчики',
            },
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.TextField(blank=True, default=None, null=True, verbose_name='Предмет истории')),
                ('is_error', models.BooleanField(blank=True, default=False, null=True)),
                ('timestamp', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'история',
                'verbose_name_plural': 'истории',
            },
        ),
        migrations.CreateModel(
            name='Middleware',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('middleware_type', models.CharField(choices=[('DefaultTriggerReason', 'Default Trigger Reason')], default=None, max_length=255, null=True, verbose_name='Обработчик')),
            ],
            options={
                'verbose_name': 'middleware',
                'verbose_name_plural': 'trigger middleware',
            },
        ),
        migrations.CreateModel(
            name='TelegramUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tg_user_id', models.PositiveIntegerField(blank=True, default=None, null=True, verbose_name='ID отправителя')),
                ('tg_username', models.CharField(blank=True, db_index=True, default=None, max_length=255, null=True, verbose_name='Телеграм юзер')),
                ('tg_first_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Имя')),
                ('tg_last_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Фамилия')),
                ('tg_recently_status', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Последнее посещение')),
                ('is_bot', models.BooleanField(blank=True, default=None, null=True, verbose_name='Это бот')),
                ('is_contact', models.BooleanField(blank=True, default=None, null=True, verbose_name='Юзер из контактов')),
                ('is_scam', models.BooleanField(blank=True, default=None, null=True, verbose_name='Скомпроментирован')),
                ('is_support', models.BooleanField(blank=True, default=None, null=True, verbose_name='Это тех. поддержка')),
            ],
            options={
                'verbose_name': 'телеграм юзер',
                'verbose_name_plural': 'телеграм юзеры',
            },
        ),
        migrations.CreateModel(
            name='SceneInstance',
            fields=[
                ('basescene_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='telegram.BaseScene')),
                ('is_current_instance', models.BooleanField(blank=True, default=False, editable=False, help_text='Не доступно для ручного изменения.', null=True)),
                ('is_finished_instance', models.BooleanField(blank=True, default=False, editable=False, help_text='Не доступно для ручного изменения.', null=True)),
                ('is_message', models.BooleanField(blank=True, default=None, editable=False, null=True)),
                ('message_type', models.CharField(blank=True, choices=[('Incoming', 'Входящее'), ('Sent', 'Исходящее')], default=None, max_length=255, null=True, verbose_name='Тип сообщения')),
                ('message_id', models.PositiveIntegerField(blank=True, default=None, null=True, verbose_name='ID сообщения')),
                ('text', models.TextField(blank=True, default=None, null=True, verbose_name='Текст сообщения')),
                ('sender_id', models.PositiveIntegerField(blank=True, default=None, null=True, verbose_name='ID отправителя')),
                ('sender_username', models.CharField(blank=True, db_index=True, default=None, max_length=255, null=True, verbose_name='Телеграм юзер')),
                ('sender_first_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Имя')),
                ('sender_last_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Фамилия')),
            ],
            options={
                'verbose_name': 'сцена сообщения',
                'verbose_name_plural': 'сцены сообщений',
            },
            bases=('telegram.basescene',),
        ),
        migrations.CreateModel(
            name='Trigger',
            fields=[
                ('middleware_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='telegram.Middleware')),
                ('words', models.TextField(blank=True, default=None, help_text='Через запятую', null=True, verbose_name='Триггерные слова')),
                ('answers', models.TextField(blank=True, default=None, help_text='Через запятую. \nОтвет выбирается случайным образом из указанного списка.', null=True, verbose_name='Ответы')),
                ('is_enabled', models.BooleanField(blank=True, default=True, null=True, verbose_name='Активно')),
                ('timestamp', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'триггер',
                'verbose_name_plural': 'триггеры',
            },
            bases=('telegram.middleware',),
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.CharField(blank=True, choices=[('Incoming', 'Входящее'), ('Sent', 'Исходящее')], default=None, max_length=255, null=True, verbose_name='Тип сообщения')),
                ('message_id', models.PositiveIntegerField(blank=True, default=None, null=True, verbose_name='ID сообщения')),
                ('text', models.TextField(blank=True, default=None, null=True, verbose_name='Текст сообщения')),
                ('sender_id', models.PositiveIntegerField(blank=True, default=None, null=True, verbose_name='ID отправителя')),
                ('sender_username', models.CharField(blank=True, db_index=True, default=None, max_length=255, null=True, verbose_name='Телеграм юзер')),
                ('sender_first_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Имя')),
                ('sender_last_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Фамилия')),
                ('sender_recently_status', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Последнее посещение')),
                ('sender_is_bot', models.BooleanField(blank=True, default=None, null=True, verbose_name='Это бот')),
                ('sender_is_contact', models.BooleanField(blank=True, default=None, null=True, verbose_name='Юзер из контактов')),
                ('sender_is_scam', models.BooleanField(blank=True, default=None, null=True, verbose_name='Скомпроментирован')),
                ('sender_is_support', models.BooleanField(blank=True, default=None, null=True, verbose_name='Это тех. поддержка')),
                ('chat_id', models.IntegerField(blank=True, default=None, null=True, verbose_name='ID чата')),
                ('chat_type', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Тип чата, напр. супергруппа')),
                ('chat_title', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Title чата')),
                ('chat_username', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Username чата')),
                ('timestamp', models.DateTimeField(auto_now=True, null=True)),
                ('app', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='telegram.Config', verbose_name='Приложение')),
            ],
            options={
                'verbose_name': 'сообщение',
                'verbose_name_plural': 'сообщения',
            },
        ),
        migrations.AddField(
            model_name='basescene',
            name='app',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='telegram.Config', verbose_name='Приложение'),
        ),
        migrations.AddField(
            model_name='basescene',
            name='triggers',
            field=models.ManyToManyField(blank=True, default=None, to='telegram.Trigger', verbose_name='Триггеры'),
        ),
    ]
